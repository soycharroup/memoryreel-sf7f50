name: Web Application CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'src/web/**'
      - 'infrastructure/docker/web/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/web/**'
      - 'infrastructure/docker/web/**'

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  NODE_ENV: production
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DEPLOYMENT_REGIONS: ${{ vars.DEPLOYMENT_REGIONS }}

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        working-directory: src/web
        run: |
          npm ci
          npm audit

      - name: Run ESLint
        working-directory: src/web
        run: npm run lint

      - name: Type check
        working-directory: src/web
        run: npm run typecheck

      - name: Run unit tests
        working-directory: src/web
        run: npm run test:coverage

      - name: Run integration tests
        working-directory: src/web
        run: npm run test -- --selectProjects=integration

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: src/web/coverage/
          retention-days: 14

  security-scan:
    name: Security Analysis
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SAST scan
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Scan dependencies
        working-directory: src/web
        run: |
          npm audit
          npm run snyk test || true

      - name: Container image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/memoryreel-web:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  build:
    name: Build and Push
    needs: [security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/web/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/memoryreel-web:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/memoryreel-web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_ENV=production
            VITE_API_URL=/api
            VITE_TV_PLATFORM=true

  deploy:
    name: Deploy to Region
    needs: [build]
    strategy:
      matrix:
        region: [us-east-1, eu-west-1, ap-southeast-2]
    runs-on: ubuntu-latest
    environment:
      name: production-${{ matrix.region }}
      url: https://${{ matrix.region }}.memoryreel.com
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ matrix.region }}

      - name: Deploy to EKS
        uses: azure/k8s-deploy@v4
        with:
          manifests: |
            infrastructure/kubernetes/web/deployment.yaml
            infrastructure/kubernetes/web/service.yaml
            infrastructure/kubernetes/web/ingress.yaml
          images: ${{ env.DOCKER_REGISTRY }}/memoryreel-web:${{ github.sha }}
          strategy: canary
          traffic-split-method: pod
          percentage: 20
          increment-interval: 5m
          baseline-and-canary-replicas: 2

      - name: Monitor deployment
        uses: azure/k8s-deploy@v4
        with:
          action: promote
          strategy: canary
          timeout: 5m
          success-threshold: |
            http-success-rate>=99.9%
            latency-p95<2s
            error-rate<0.1%

      - name: Rollback on failure
        if: failure()
        uses: azure/k8s-deploy@v4
        with:
          action: reject
          strategy: canary

      - name: Notify deployment status
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            Deployment to ${{ matrix.region }} ${{ job.status }}
            Environment: production-${{ matrix.region }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}